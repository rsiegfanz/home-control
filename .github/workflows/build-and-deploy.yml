name: Build and Push Docker Images

on:
  push:
    branches:
      - dev
      - prod
  pull_request:
    branches:
      - dev
      - prod
    paths:
      - "backend/**"
      - "frontend/**"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Initialize changes.txt
        run: echo "" > changes.txt
        shell: bash

      - name: Initialize services_to_build.txt
        run: echo "" > services_to_build.txt
        shell: bash

      - name: Get Changes
        run: |
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            echo "This is a shallow clone. Fetching full history..."
            git fetch --unshallow
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Checking changes for the PR..."
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changes.txt
          else
            echo "Checking changes since the last commit..."
            if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
              git diff --name-only HEAD^ HEAD > changes.txt
            else
              echo "No previous commit found. Building all images."
              echo "backend/fetcher" > changes.txt
              echo "backend/ingestor" >> changes.txt
              echo "backend/seeder" >> changes.txt
              echo "backend/server" >> changes.txt
            fi
          fi

          echo "Changes detected:"
          cat changes.txt
        shell: bash

      - name: Read Changes
        run: |
          if grep -q "sharedlib" changes.txt; then
            echo "Shared library has changed. Building all services."
            echo "fetcher" >> services_to_build.txt
            echo "ingestor" >> services_to_build.txt
            echo "seeder" >> services_to_build.txt
            echo "server" >> services_to_build.txt
          else
            if grep -q "backend/fetcher" changes.txt; then
              echo "Fetcher has changed."
              echo "fetcher" >> services_to_build.txt
            fi
            if grep -q "backend/ingestor" changes.txt; then
              echo "Ingestor has changed."
              echo "ingestor" >> services_to_build.txt
            fi
            if grep -q "backend/seeder" changes.txt; then
              echo "Seeder has changed."
              echo "seeder" >> services_to_build.txt
            fi
            if grep -q "backend/server" changes.txt || grep -q "frontend" changes.txt; then
              echo "Server or frontend has changed."
              echo "server" >> services_to_build.txt
            fi
          fi
          echo "Services to build: $(cat services_to_build.txt)"
        shell: bash

      - name: Check for Services to Build
        id: check_services
        run: |
          if [ ! -s services_to_build.txt ]; then
            echo "No services to build. Exiting."
            exit 1
          else
            echo "Services to build:"
            cat services_to_build.txt
          fi
        shell: bash

      - name: Set up Docker Buildx
        if: success()
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        if: success()
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        if: success()
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and Push Docker Images
        if: success()
        run: |
          while IFS= read -r service || [[ -n "$service" ]]; do
            if [ -n "$service" ]; then
              echo "Building and pushing $service..."
              docker buildx build \
                --cache-from type=local,src=/tmp/.buildx-cache \
                --cache-to type=local,dest=/tmp/.buildx-cache-new \
                --tag rsiegfanz/home-control-${service}:${{ github.sha }} \
                --tag rsiegfanz/home-control-${service}:latest \
                --file ./backend/${service}/Dockerfile \
                --push \
                .
              echo "Finished building and pushing $service"
            fi
          done < services_to_build.txt
          echo "All builds completed successfully"

      - name: Move cache
        if: success()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Cache Trivy vulnerability database
        if: success()
        uses: actions/cache@v2
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      - name: Install Trivy
        if: success()
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Update Trivy DB
        run: |
          update_db_with_retry() {
            local max_attempts=5
            local attempt=1
            local wait_time=30

            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts: Updating Trivy DB..."
              if trivy --cache-dir ~/.cache/trivy image --download-db-only; then
                echo "Trivy DB update successful"
                return 0
              else
                echo "Trivy DB update failed. Retrying in $wait_time seconds..."
                sleep $wait_time
                wait_time=$((wait_time * 2))
                attempt=$((attempt + 1))
              fi
            done

            echo "Failed to update Trivy DB after $max_attempts attempts"
            return 1
          }

          if ! update_db_with_retry; then
            echo "Warning: Trivy DB update failed. Proceeding with existing DB."
          fi
        shell: bash

      - name: Scan Docker Images
        run: |
          scan_with_retry() {
            local service=$1
            local max_attempts=5
            local attempt=1
            local wait_time=10

            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts: Scanning $service..."
              if trivy image --cache-dir ~/.cache/trivy --no-progress "rsiegfanz/home-control-${service}:latest"; then
                echo "Scan successful for $service"
                return 0
              else
                echo "Scan failed for $service. Retrying in $wait_time seconds..."
                sleep $wait_time
                wait_time=$((wait_time * 2))
                attempt=$((attempt + 1))
              fi
            done

            echo "Failed to scan $service after $max_attempts attempts"
            return 1
          }

          failed_scans=()
          while IFS= read -r service || [[ -n "$service" ]]; do
            if [ -n "$service" ]; then
              if ! scan_with_retry "$service"; then
                failed_scans+=("$service")
              fi
            fi
          done < services_to_build.txt

          if [ ${#failed_scans[@]} -ne 0 ]; then
            echo "The following scans failed:"
            printf '%s\n' "${failed_scans[@]}"
            exit 1
          fi
        shell: bash

      - name: Cleanup
        if: always()
        run: rm -f changes.txt services_to_build.txt

      - name: Send Telegram Notification
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          BUILD_STATUS="Success"
          if [ "${{ job.status }}" != "success" ]; then
            BUILD_STATUS="Failure"
          fi
          MESSAGE="Build Status: $BUILD_STATUS%0A"
          MESSAGE+="Repository: ${{ github.repository }}%0A"
          MESSAGE+="Branch: ${{ github.ref_name }}%0A"
          MESSAGE+="Commit: ${{ github.sha }}%0A"
          MESSAGE+="Build URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage -d chat_id=${TELEGRAM_CHAT_ID} -d text="$MESSAGE"

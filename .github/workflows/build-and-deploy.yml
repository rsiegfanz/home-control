name: Build and Push Docker Images

on:
  push:
    branches:
      - master
      - production
  pull_request:
    branches:
      - master
      - production

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Changes
        run: |
          if [ "$(git rev-parse --is-shallow-repository)" = "true" ]; then
            echo "This is a shallow clone. Fetching full history..."
            git fetch --unshallow
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Checking changes for the PR..."
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changes.txt
          else
            echo "Checking changes since the last commit..."
            if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
              git diff --name-only HEAD^ HEAD > changes.txt
            else
              echo "No previous commit found. Building all images."
              echo "fetcher" > changes.txt
              echo "ingestor" >> changes.txt
              echo "seeder" >> changes.txt
              echo "server" >> changes.txt
            fi
          fi

        shell: bash

      - name: Read Changes
        run: |
          if grep -q "backend/fetcher" changes.txt; then
            echo "Fetcher has changed."
            echo "fetcher" >> services_to_build.txt
          fi
          if grep -q "backend/ingestor" changes.txt; then
            echo "Ingestor has changed."
            echo "ingestor" >> services_to_build.txt
          fi
          if grep -q "backend/seeder" changes.txt; then
            echo "Seeder has changed."
            echo "seeder" >> services_to_build.txt
          fi
          if grep -q "backend/server" changes.txt || grep -q "frontend" changes.txt; then
            echo "Server or frontend has changed."
            echo "server" >> services_to_build.txt
          fi

        shell: bash

      - name: Build and Push Docker Images
        if: success()
        env:
          DOCKER_REGISTRY: docker.io
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: |
          while read service; do
            echo "Building and pushing $service..."
            docker build -t rsiegfanz/home-control-$service -f ./backend/$service/Dockerfile .
            echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker push rsiegfanz/home-control-$service
          done < services_to_build.txt

        shell: bash
